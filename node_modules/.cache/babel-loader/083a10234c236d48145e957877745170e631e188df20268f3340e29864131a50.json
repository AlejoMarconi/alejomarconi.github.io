{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\valde\\\\pagina-estaciones\\\\src\\\\components\\\\StationMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Box, Paper, Typography, IconButton, Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';\nimport { motion } from 'framer-motion';\nimport { stations } from '../data/stations';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport MyLocationIcon from '@mui/icons-material/MyLocation';\nimport DirectionsIcon from '@mui/icons-material/Directions';\n// Import train schedules\nimport trainSchedules from '../data/trainSchedules.json';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StationMap = ({\n  currentLocation,\n  nearestStation\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [scale, setScale] = useState(1);\n  const [offset, setOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({\n    x: 0,\n    y: 0\n  });\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [destinationStation, setDestinationStation] = useState(null);\n  const [isNearStation, setIsNearStation] = useState(false);\n  const [isOnTrainRoute, setIsOnTrainRoute] = useState(false);\n  const [nextTrainTime, setNextTrainTime] = useState(null);\n  // Add new state for next trains in both directions\n  const [nextTrains, setNextTrains] = useState({\n    toLemos: null,\n    toLacroze: null\n  });\n\n  // Function to get the day type (lunes_a_viernes, sabados, domingos)\n  const getDayType = () => {\n    const today = new Date();\n    const day = today.getDay(); // 0 is Sunday, 1 is Monday, etc.\n\n    if (day === 0) return 'domingos';\n    if (day === 6) return 'sabados';\n    return 'lunes_a_viernes';\n  };\n\n  // Function to parse time string to minutes since midnight\n  const parseTimeToMinutes = timeStr => {\n    if (!timeStr) return null;\n\n    // Clean up any invalid time strings (some entries in the JSON have errors)\n    if (timeStr.length !== 5 || timeStr.indexOf(':') !== 2) {\n      return null;\n    }\n    try {\n      const [hours, minutes] = timeStr.split(':').map(num => parseInt(num, 10));\n      // Handle invalid time values\n      if (isNaN(hours) || isNaN(minutes) || hours >= 24 || minutes >= 60) {\n        return null;\n      }\n      return hours * 60 + minutes;\n    } catch (error) {\n      console.error(\"Error parsing time:\", timeStr, error);\n      return null;\n    }\n  };\n\n  // Function to convert minutes to formatted time string (HH:MM)\n  const minutesToTimeString = minutes => {\n    if (minutes === null || isNaN(minutes)) return '--:--';\n    const hours = Math.floor(minutes / 60) % 24;\n    const mins = minutes % 60;\n    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\n  };\n\n  // Function to calculate minutes until next train\n  const getMinutesUntil = timeInMinutes => {\n    if (timeInMinutes === null) return null;\n    const now = new Date();\n    const currentMinutes = now.getHours() * 60 + now.getMinutes();\n\n    // If the train time is earlier than current time, it's for tomorrow\n    if (timeInMinutes < currentMinutes) {\n      return 24 * 60 - currentMinutes + timeInMinutes;\n    }\n    return timeInMinutes - currentMinutes;\n  };\n\n  // Function to find the next train times for a station\n  const findNextTrains = stationName => {\n    if (!stationName || !trainSchedules[stationName]) {\n      return {\n        toLemos: null,\n        toLacroze: null\n      };\n    }\n    const dayType = getDayType();\n    const stationSchedule = trainSchedules[stationName][dayType];\n    if (!stationSchedule) {\n      return {\n        toLemos: null,\n        toLacroze: null\n      };\n    }\n    const now = new Date();\n    const currentMinutes = now.getHours() * 60 + now.getMinutes();\n\n    // Find next train to Lemos\n    let nextToLemos = null;\n    if (stationSchedule.a_lemos && Array.isArray(stationSchedule.a_lemos)) {\n      const validTimes = stationSchedule.a_lemos.map(time => parseTimeToMinutes(time)).filter(minutes => minutes !== null);\n\n      // Find the next departure time\n      nextToLemos = validTimes.find(minutes => minutes > currentMinutes);\n\n      // If no train found today, get the first train of tomorrow\n      if (nextToLemos === undefined && validTimes.length > 0) {\n        nextToLemos = validTimes[0] + 24 * 60; // Add 24 hours\n      }\n    }\n\n    // Find next train to Lacroze\n    let nextToLacroze = null;\n    if (stationSchedule.a_lacroze && Array.isArray(stationSchedule.a_lacroze)) {\n      const validTimes = stationSchedule.a_lacroze.map(time => parseTimeToMinutes(time)).filter(minutes => minutes !== null);\n\n      // Find the next departure time\n      nextToLacroze = validTimes.find(minutes => minutes > currentMinutes);\n\n      // If no train found today, get the first train of tomorrow\n      if (nextToLacroze === undefined && validTimes.length > 0) {\n        nextToLacroze = validTimes[0] + 24 * 60; // Add 24 hours\n      }\n    }\n    return {\n      toLemos: nextToLemos,\n      toLacroze: nextToLacroze\n    };\n  };\n\n  // Update next train times when nearest station changes or every minute\n  useEffect(() => {\n    if (nearestStation) {\n      const updateTrainTimes = () => {\n        const nextTrainTimes = findNextTrains(nearestStation.name);\n        setNextTrains(nextTrainTimes);\n\n        // Also update the legacy nextTrainTime for compatibility\n        const nextInMinutes = Math.min(nextTrainTimes.toLemos !== null ? getMinutesUntil(nextTrainTimes.toLemos) : Infinity, nextTrainTimes.toLacroze !== null ? getMinutesUntil(nextTrainTimes.toLacroze) : Infinity);\n        setNextTrainTime(nextInMinutes !== Infinity ? nextInMinutes : null);\n      };\n\n      // Update immediately\n      updateTrainTimes();\n\n      // Then update every minute\n      const intervalId = setInterval(updateTrainTimes, 60000);\n      return () => clearInterval(intervalId);\n    }\n  }, [nearestStation]);\n\n  // Función para calcular la distancia entre dos puntos usando la fórmula de Haversine\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const toRad = degrees => degrees * Math.PI / 180;\n    const R = 6371; // Radio de la Tierra en km\n    const dLat = toRad(lat2 - lat1);\n    const dLon = toRad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distancia en km\n    return distance;\n  };\n\n  // Función para calcular el tiempo estimado de llegada (ETA)\n  const calculateETA = (fromStation, toStation) => {\n    // Velocidad promedio del tren en km/h\n    const avgTrainSpeed = 30;\n\n    // Encontrar las coordenadas de las estaciones\n    const fromCoords = stations.find(s => s[2] === fromStation.name);\n    const toCoords = stations.find(s => s[2] === toStation.name);\n    if (!fromCoords || !toCoords) return null;\n    const distance = calculateDistance(fromCoords[0], fromCoords[1], toCoords[0], toCoords[1]);\n\n    // Calcular tiempo en minutos\n    const timeInMinutes = distance / avgTrainSpeed * 60;\n    return Math.round(timeInMinutes);\n  };\n\n  // Verificar si el usuario está cerca de una estación (menos de 30m) o en la ruta del tren\n  useEffect(() => {\n    if (currentLocation && nearestStation) {\n      // Convertir 30m a km\n      const thresholdDistance = 0.03; // 30 metros en kilómetros\n\n      // Verificar si está cerca de una estación\n      setIsNearStation(nearestStation.distance <= thresholdDistance);\n\n      // Verificar si está en la ruta del tren (dentro de un margen de 30m siguiendo la línea)\n      const isOnRoute = isUserOnTrainRoute(currentLocation.latitude, currentLocation.longitude);\n      setIsOnTrainRoute(isOnRoute);\n\n      // Calcular tiempo para el próximo tren\n      calculateNextTrainTime();\n    } else {\n      setIsNearStation(false);\n      setIsOnTrainRoute(false);\n    }\n  }, [currentLocation, nearestStation]);\n\n  // Función para verificar si el usuario está en la ruta del tren\n  const isUserOnTrainRoute = (userLat, userLon) => {\n    // Margen de 30m en kilómetros\n    const routeMargin = 0.03;\n\n    // Verificar si el usuario está cerca de algún segmento de la ruta del tren\n    for (let i = 0; i < stations.length - 1; i++) {\n      const station1 = stations[i];\n      const station2 = stations[i + 1];\n\n      // Calcular la distancia del usuario al segmento de línea entre dos estaciones\n      const distance = distanceToLineSegment(userLat, userLon, station1[0], station1[1], station2[0], station2[1]);\n      if (distance <= routeMargin) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // Función para calcular la distancia de un punto a un segmento de línea\n  const distanceToLineSegment = (px, py, x1, y1, x2, y2) => {\n    const A = px - x1;\n    const B = py - y1;\n    const C = x2 - x1;\n    const D = y2 - y1;\n    const dot = A * C + B * D;\n    const len_sq = C * C + D * D;\n    let param = -1;\n    if (len_sq !== 0) {\n      param = dot / len_sq;\n    }\n    let xx, yy;\n    if (param < 0) {\n      xx = x1;\n      yy = y1;\n    } else if (param > 1) {\n      xx = x2;\n      yy = y2;\n    } else {\n      xx = x1 + param * C;\n      yy = y1 + param * D;\n    }\n    const dx = px - xx;\n    const dy = py - yy;\n    return calculateDistance(px, py, xx, yy);\n  };\n\n  // Función para calcular el tiempo para el próximo tren\n  const calculateNextTrainTime = () => {\n    // Simulación de horarios de trenes (en la vida real, esto vendría de una API)\n    const now = new Date();\n    const hour = now.getHours();\n    const minute = now.getMinutes();\n    const currentTimeInMinutes = hour * 60 + minute;\n\n    // Horarios de trenes simplificados (cada 20 minutos en horas pico, cada 30 en horas valle)\n    let nextTrainInMinutes = 0;\n    if (hour >= 5 && hour < 9) {\n      // Hora pico mañana (cada 20 minutos)\n      nextTrainInMinutes = 20 - currentTimeInMinutes % 20;\n    } else if (hour >= 16 && hour < 20) {\n      // Hora pico tarde (cada 20 minutos)\n      nextTrainInMinutes = 20 - currentTimeInMinutes % 20;\n    } else if (hour >= 5 && hour < 23) {\n      // Hora valle (cada 30 minutos)\n      nextTrainInMinutes = 30 - currentTimeInMinutes % 30;\n    } else {\n      // Fuera de servicio\n      nextTrainInMinutes = null;\n    }\n    setNextTrainTime(nextTrainInMinutes);\n  };\n\n  // Función para manejar el zoom\n  const handleZoom = zoomIn => {\n    setScale(prevScale => {\n      const newScale = zoomIn ? prevScale * 1.2 : prevScale / 1.2;\n      // Limitar el zoom entre 0.5 y 5\n      return Math.min(Math.max(newScale, 0.5), 5);\n    });\n  };\n\n  // Función para centrar el mapa en la ubicación actual\n  const centerOnCurrentLocation = () => {\n    setOffset({\n      x: 0,\n      y: 0\n    });\n    setScale(1);\n  };\n\n  // Manejadores de eventos para arrastrar el mapa\n  const handleMouseDown = e => {\n    setIsDragging(true);\n    setDragStart({\n      x: e.clientX,\n      y: e.clientY\n    });\n  };\n  const handleMouseMove = e => {\n    if (!isDragging) return;\n    const dx = e.clientX - dragStart.x;\n    const dy = e.clientY - dragStart.y;\n    setOffset(prev => ({\n      x: prev.x + dx,\n      y: prev.y + dy\n    }));\n    setDragStart({\n      x: e.clientX,\n      y: e.clientY\n    });\n  };\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  // Manejadores de eventos táctiles para dispositivos móviles\n  const handleTouchStart = e => {\n    if (e.touches.length === 1) {\n      setIsDragging(true);\n      setDragStart({\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      });\n    }\n  };\n  const handleTouchMove = e => {\n    if (!isDragging || e.touches.length !== 1) return;\n    const dx = e.touches[0].clientX - dragStart.x;\n    const dy = e.touches[0].clientY - dragStart.y;\n    setOffset(prev => ({\n      x: prev.x + dx,\n      y: prev.y + dy\n    }));\n    setDragStart({\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY\n    });\n  };\n  const handleTouchEnd = () => {\n    setIsDragging(false);\n  };\n\n  // Función para manejar clics en el mapa\n  const handleCanvasClick = e => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - rect.left) * (canvas.width / rect.width);\n    const y = (e.clientY - rect.top) * (canvas.height / rect.height);\n\n    // Encontrar los límites del mapa\n    let minLat = Infinity,\n      maxLat = -Infinity,\n      minLon = Infinity,\n      maxLon = -Infinity;\n    stations.forEach(station => {\n      minLat = Math.min(minLat, station[0]);\n      maxLat = Math.max(maxLat, station[0]);\n      minLon = Math.min(minLon, station[1]);\n      maxLon = Math.max(maxLon, station[1]);\n    });\n\n    // Añadir padding\n    const padding = 0.01;\n    minLat -= padding;\n    maxLat += padding;\n    minLon -= padding;\n    maxLon += padding;\n\n    // Función para convertir posición del canvas a coordenadas\n    const canvasToCoord = (x, y, width, height) => {\n      // Ajustar por zoom y desplazamiento\n      const adjustedX = (x - offset.x) / scale;\n      const adjustedY = (y - offset.y) / scale;\n      const lon = minLon + adjustedX / width * (maxLon - minLon);\n      const lat = maxLat - adjustedY / height * (maxLat - minLat);\n      return {\n        lat,\n        lon\n      };\n    };\n\n    // Función para convertir coordenadas a posición del canvas\n    const coordToCanvas = (lat, lon, width, height) => {\n      const x = (lon - minLon) / (maxLon - minLon) * width;\n      const y = height - (lat - minLat) / (maxLat - minLat) * height;\n\n      // Ajustar por zoom y desplazamiento\n      return {\n        x: x * scale + offset.x,\n        y: y * scale + offset.y\n      };\n    };\n\n    // Verificar si se hizo clic en alguna estación\n    const stationRadius = 10; // Radio de detección de clic en píxeles\n    let clickedStation = null;\n    stations.forEach(station => {\n      const pos = coordToCanvas(station[0], station[1], canvas.width, canvas.height);\n      const distance = Math.sqrt(Math.pow(x - pos.x, 2) + Math.pow(y - pos.y, 2));\n      if (distance <= stationRadius) {\n        clickedStation = {\n          name: station[2],\n          coordinates: [station[0], station[1]]\n        };\n      }\n    });\n    if (clickedStation) {\n      setSelectedStation(clickedStation);\n      setOpenDialog(true);\n    }\n  };\n\n  // Función para cerrar el diálogo\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  // Función para establecer la estación seleccionada como destino\n  const handleSetAsDestination = () => {\n    setDestinationStation(selectedStation);\n    setOpenDialog(false);\n  };\n  useEffect(() => {\n    if (!canvasRef.current || !currentLocation) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Find map boundaries\n    let minLat = Infinity,\n      maxLat = -Infinity,\n      minLon = Infinity,\n      maxLon = -Infinity;\n    stations.forEach(station => {\n      minLat = Math.min(minLat, station[0]);\n      maxLat = Math.max(maxLat, station[0]);\n      minLon = Math.min(minLon, station[1]);\n      maxLon = Math.max(maxLon, station[1]);\n    });\n\n    // Add some padding\n    const padding = 0.01;\n    minLat -= padding;\n    maxLat += padding;\n    minLon -= padding;\n    maxLon += padding;\n\n    // Function to convert coordinates to canvas position with zoom and offset\n    const coordToCanvas = (lat, lon) => {\n      const x = (lon - minLon) / (maxLon - minLon) * width;\n      const y = height - (lat - minLat) / (maxLat - minLat) * height;\n\n      // Apply zoom and offset\n      return {\n        x: x * scale + offset.x,\n        y: y * scale + offset.y\n      };\n    };\n\n    // Draw train line\n    ctx.beginPath();\n    ctx.strokeStyle = '#3498db';\n    ctx.lineWidth = 4 * scale; // Adjust line width based on zoom\n\n    const firstStation = coordToCanvas(stations[0][0], stations[0][1]);\n    ctx.moveTo(firstStation.x, firstStation.y);\n    stations.forEach((station, index) => {\n      if (index === 0) return;\n      const pos = coordToCanvas(station[0], station[1]);\n      ctx.lineTo(pos.x, pos.y);\n    });\n    ctx.stroke();\n\n    // Draw stations\n    stations.forEach(station => {\n      const pos = coordToCanvas(station[0], station[1]);\n\n      // Station circle\n      ctx.beginPath();\n      ctx.fillStyle = '#2c3e50';\n      ctx.arc(pos.x, pos.y, 5 * scale, 0, Math.PI * 2);\n      ctx.fill();\n\n      // Highlight nearest station\n      if (nearestStation && station[2] === nearestStation.name) {\n        ctx.beginPath();\n        ctx.strokeStyle = '#e74c3c';\n        ctx.lineWidth = 2 * scale;\n        ctx.arc(pos.x, pos.y, 8 * scale, 0, Math.PI * 2);\n        ctx.stroke();\n      }\n\n      // Highlight destination station if set\n      if (destinationStation && station[2] === destinationStation.name) {\n        ctx.beginPath();\n        ctx.strokeStyle = '#27ae60'; // Green color for destination\n        ctx.lineWidth = 3 * scale;\n        ctx.arc(pos.x, pos.y, 10 * scale, 0, Math.PI * 2);\n        ctx.stroke();\n\n        // Add a destination flag or icon\n        ctx.beginPath();\n        ctx.fillStyle = '#27ae60';\n        ctx.moveTo(pos.x, pos.y - 15 * scale);\n        ctx.lineTo(pos.x + 10 * scale, pos.y - 5 * scale);\n        ctx.lineTo(pos.x, pos.y + 5 * scale);\n        ctx.lineTo(pos.x - 10 * scale, pos.y - 5 * scale);\n        ctx.closePath();\n        ctx.fill();\n      }\n\n      // Mejorar la visualización de los nombres de estaciones\n      if (scale > 1.5) {\n        // Aumentar el tamaño de la fuente y mejorar el espaciado\n        ctx.font = `bold ${14 * scale}px Arial`;\n        ctx.fillStyle = '#333';\n        ctx.textAlign = 'center';\n\n        // Añadir un fondo blanco semi-transparente para mejorar la legibilidad\n        const textWidth = ctx.measureText(station[2]).width;\n        const textHeight = 14 * scale;\n        const padding = 4 * scale;\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n        ctx.fillRect(pos.x - textWidth / 2 - padding, pos.y - 20 * scale - textHeight, textWidth + padding * 2, textHeight + padding);\n\n        // Dibujar el texto con más espacio vertical\n        ctx.fillStyle = '#333';\n        ctx.fillText(station[2], pos.x, pos.y - 20 * scale);\n      }\n    });\n\n    // Draw user location\n    if (currentLocation) {\n      const userPos = coordToCanvas(currentLocation.latitude, currentLocation.longitude);\n      ctx.beginPath();\n      ctx.fillStyle = '#e74c3c';\n      ctx.arc(userPos.x, userPos.y, 6 * scale, 0, Math.PI * 2);\n      ctx.fill();\n\n      // Draw accuracy circle\n      if (currentLocation.accuracy) {\n        const accuracyInDegrees = currentLocation.accuracy / 111000; // Aproximadamente 111km por grado\n        const accuracyRadius = accuracyInDegrees / (maxLat - minLat) * height * scale;\n        ctx.beginPath();\n        ctx.strokeStyle = 'rgba(231, 76, 60, 0.3)';\n        ctx.fillStyle = 'rgba(231, 76, 60, 0.1)';\n        ctx.lineWidth = 1 * scale;\n        ctx.arc(userPos.x, userPos.y, accuracyRadius, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n      }\n\n      // Draw line between user and nearest station\n      if (nearestStation) {\n        const nearestStationData = stations.find(s => s[2] === nearestStation.name);\n        if (nearestStationData) {\n          const stationPos = coordToCanvas(nearestStationData[0], nearestStationData[1]);\n          ctx.beginPath();\n          ctx.strokeStyle = '#e74c3c';\n          ctx.lineWidth = 2 * scale;\n          ctx.setLineDash([5 * scale, 3 * scale]);\n          ctx.moveTo(userPos.x, userPos.y);\n          ctx.lineTo(stationPos.x, stationPos.y);\n          ctx.stroke();\n          ctx.setLineDash([]);\n        }\n      }\n\n      // Draw line between user and destination station if set\n      if (destinationStation) {\n        const destStationData = stations.find(s => s[2] === destinationStation.name);\n        if (destStationData) {\n          const stationPos = coordToCanvas(destStationData[0], destStationData[1]);\n          ctx.beginPath();\n          ctx.strokeStyle = '#27ae60'; // Green color for destination\n          ctx.lineWidth = 2 * scale;\n          ctx.setLineDash([8 * scale, 4 * scale]);\n          ctx.moveTo(userPos.x, userPos.y);\n          ctx.lineTo(stationPos.x, stationPos.y);\n          ctx.stroke();\n          ctx.setLineDash([]);\n        }\n      }\n    }\n  }, [currentLocation, nearestStation, scale, offset, destinationStation]);\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0,\n      y: 20\n    },\n    animate: {\n      opacity: 1,\n      y: 0\n    },\n    transition: {\n      duration: 0.5,\n      delay: 0.2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: 3,\n        mb: 4,\n        borderRadius: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        component: \"h3\",\n        gutterBottom: true,\n        children: isNearStation || isOnTrainRoute ? \"Mapa de Estaciones\" : \"Próximo Tren\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 9\n      }, this), !(isNearStation || isOnTrainRoute) ?\n      /*#__PURE__*/\n      // Si no está cerca de una estación ni en la ruta del tren, mostrar solo información del próximo tren\n      _jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          py: 3\n        },\n        children: nearestStation && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: [\"Estaci\\xF3n m\\xE1s cercana: \", nearestStation.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            gutterBottom: true,\n            children: [\"Distancia: \", nearestStation.distance < 1 ? `${(nearestStation.distance * 1000).toFixed(0)} metros` : `${nearestStation.distance.toFixed(2)} km`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 17\n          }, this), nextTrainTime !== null ? /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            color: \"primary\",\n            sx: {\n              mt: 2\n            },\n            children: [\"Pr\\xF3ximo tren en: \", nextTrainTime, \" minutos\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"error\",\n            sx: {\n              mt: 2\n            },\n            children: \"No hay servicio de trenes en este momento\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 662,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            startIcon: /*#__PURE__*/_jsxDEV(DirectionsIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 30\n            }, this),\n            sx: {\n              mt: 3\n            },\n            onClick: () => {\n              // Establecer la estación más cercana como destino\n              setDestinationStation({\n                name: nearestStation.name,\n                coordinates: stations.find(s => s[2] === nearestStation.name).slice(0, 2)\n              });\n            },\n            children: \"Ir a esta estaci\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Si está cerca de una estación o en la ruta del tren, mostrar el mapa completo\n      _jsxDEV(_Fragment, {\n        children: [destinationStation && nearestStation && (isNearStation || destinationStation.name === nearestStation.name) && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2,\n            p: 2,\n            bgcolor: 'rgba(39, 174, 96, 0.1)',\n            borderRadius: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            fontWeight: \"bold\",\n            children: [\"Destino: \", destinationStation.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 17\n          }, this), nearestStation && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [\"Tiempo estimado: \", calculateETA(nearestStation, destinationStation) || '?', \" minutos\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            position: 'relative',\n            width: '100%',\n            height: 400,\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: canvasRef,\n            width: 800,\n            height: 600,\n            style: {\n              width: '100%',\n              height: '100%',\n              cursor: isDragging ? 'grabbing' : 'grab',\n              touchAction: 'none' // Prevent default touch actions\n            },\n            onClick: handleCanvasClick,\n            onMouseDown: handleMouseDown,\n            onMouseMove: handleMouseMove,\n            onMouseUp: handleMouseUp,\n            onMouseLeave: handleMouseUp,\n            onTouchStart: handleTouchStart,\n            onTouchMove: handleTouchMove,\n            onTouchEnd: handleTouchEnd\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              position: 'absolute',\n              bottom: 10,\n              right: 10,\n              display: 'flex',\n              flexDirection: 'column',\n              bgcolor: 'rgba(255, 255, 255, 0.8)',\n              borderRadius: 1,\n              boxShadow: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => handleZoom(true),\n              size: \"small\",\n              children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 734,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 733,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => handleZoom(false),\n              size: \"small\",\n              children: /*#__PURE__*/_jsxDEV(RemoveIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 737,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 736,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: centerOnCurrentLocation,\n              size: \"small\",\n              children: /*#__PURE__*/_jsxDEV(MyLocationIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 740,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 739,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 1\n          },\n          children: \"Haz clic en cualquier estaci\\xF3n para ver m\\xE1s informaci\\xF3n o establecerla como destino.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: handleCloseDialog,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [\"Estaci\\xF3n \", selectedStation === null || selectedStation === void 0 ? void 0 : selectedStation.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          paragraph: true,\n          children: [\"Esta es la estaci\\xF3n \", selectedStation === null || selectedStation === void 0 ? void 0 : selectedStation.name, \" del Tren Urquiza.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 11\n        }, this), nearestStation && selectedStation && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          sx: {\n            mb: 2\n          },\n          children: [\"Distancia desde tu ubicaci\\xF3n: \", calculateDistance(currentLocation.latitude, currentLocation.longitude, selectedStation.coordinates[0], selectedStation.coordinates[1]).toFixed(2), \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 13\n        }, this), nearestStation && selectedStation && nearestStation.name !== selectedStation.name && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"Tiempo estimado desde tu estaci\\xF3n actual: \", calculateETA(nearestStation, selectedStation) || '?', \" minutos\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 776,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseDialog,\n          children: \"Cerrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSetAsDestination,\n          startIcon: /*#__PURE__*/_jsxDEV(DirectionsIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 787,\n            columnNumber: 24\n          }, this),\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Establecer como destino\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 633,\n    columnNumber: 5\n  }, this);\n};\n_s(StationMap, \"D4R+1rTSAJmh5zrXkwmLd8aIrfI=\");\n_c = StationMap;\nexport default StationMap;\nvar _c;\n$RefreshReg$(_c, \"StationMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Box","Paper","Typography","IconButton","Dialog","DialogTitle","DialogContent","DialogActions","Button","motion","stations","AddIcon","RemoveIcon","MyLocationIcon","DirectionsIcon","trainSchedules","jsxDEV","_jsxDEV","Fragment","_Fragment","StationMap","currentLocation","nearestStation","_s","canvasRef","scale","setScale","offset","setOffset","x","y","isDragging","setIsDragging","dragStart","setDragStart","selectedStation","setSelectedStation","openDialog","setOpenDialog","destinationStation","setDestinationStation","isNearStation","setIsNearStation","isOnTrainRoute","setIsOnTrainRoute","nextTrainTime","setNextTrainTime","nextTrains","setNextTrains","toLemos","toLacroze","getDayType","today","Date","day","getDay","parseTimeToMinutes","timeStr","length","indexOf","hours","minutes","split","map","num","parseInt","isNaN","error","console","minutesToTimeString","Math","floor","mins","toString","padStart","getMinutesUntil","timeInMinutes","now","currentMinutes","getHours","getMinutes","findNextTrains","stationName","dayType","stationSchedule","nextToLemos","a_lemos","Array","isArray","validTimes","time","filter","find","undefined","nextToLacroze","a_lacroze","updateTrainTimes","nextTrainTimes","name","nextInMinutes","min","Infinity","intervalId","setInterval","clearInterval","calculateDistance","lat1","lon1","lat2","lon2","toRad","degrees","PI","R","dLat","dLon","a","sin","cos","c","atan2","sqrt","distance","calculateETA","fromStation","toStation","avgTrainSpeed","fromCoords","s","toCoords","round","thresholdDistance","isOnRoute","isUserOnTrainRoute","latitude","longitude","calculateNextTrainTime","userLat","userLon","routeMargin","i","station1","station2","distanceToLineSegment","px","py","x1","y1","x2","y2","A","B","C","D","dot","len_sq","param","xx","yy","dx","dy","hour","minute","currentTimeInMinutes","nextTrainInMinutes","handleZoom","zoomIn","prevScale","newScale","max","centerOnCurrentLocation","handleMouseDown","e","clientX","clientY","handleMouseMove","prev","handleMouseUp","handleTouchStart","touches","handleTouchMove","handleTouchEnd","handleCanvasClick","current","canvas","rect","getBoundingClientRect","left","width","top","height","minLat","maxLat","minLon","maxLon","forEach","station","padding","canvasToCoord","adjustedX","adjustedY","lon","lat","coordToCanvas","stationRadius","clickedStation","pos","pow","coordinates","handleCloseDialog","handleSetAsDestination","ctx","getContext","clearRect","beginPath","strokeStyle","lineWidth","firstStation","moveTo","index","lineTo","stroke","fillStyle","arc","fill","closePath","font","textAlign","textWidth","measureText","textHeight","fillRect","fillText","userPos","accuracy","accuracyInDegrees","accuracyRadius","nearestStationData","stationPos","setLineDash","destStationData","div","initial","opacity","animate","transition","duration","delay","children","elevation","sx","p","mb","borderRadius","variant","component","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","color","mt","startIcon","onClick","slice","bgcolor","fontWeight","position","ref","style","cursor","touchAction","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","bottom","right","display","flexDirection","boxShadow","size","open","onClose","paragraph","_c","$RefreshReg$"],"sources":["C:/Users/valde/pagina-estaciones/src/components/StationMap.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Box, Paper, Typography, IconButton, Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';\r\nimport { motion } from 'framer-motion';\r\nimport { stations } from '../data/stations';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RemoveIcon from '@mui/icons-material/Remove';\r\nimport MyLocationIcon from '@mui/icons-material/MyLocation';\r\nimport DirectionsIcon from '@mui/icons-material/Directions';\r\n// Import train schedules\r\nimport trainSchedules from '../data/trainSchedules.json';\r\n\r\nconst StationMap = ({ currentLocation, nearestStation }) => {\r\n  const canvasRef = useRef(null);\r\n  const [scale, setScale] = useState(1);\r\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\r\n  const [selectedStation, setSelectedStation] = useState(null);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [destinationStation, setDestinationStation] = useState(null);\r\n  const [isNearStation, setIsNearStation] = useState(false);\r\n  const [isOnTrainRoute, setIsOnTrainRoute] = useState(false);\r\n  const [nextTrainTime, setNextTrainTime] = useState(null);\r\n  // Add new state for next trains in both directions\r\n  const [nextTrains, setNextTrains] = useState({\r\n    toLemos: null,\r\n    toLacroze: null\r\n  });\r\n  \r\n  // Function to get the day type (lunes_a_viernes, sabados, domingos)\r\n  const getDayType = () => {\r\n    const today = new Date();\r\n    const day = today.getDay(); // 0 is Sunday, 1 is Monday, etc.\r\n    \r\n    if (day === 0) return 'domingos';\r\n    if (day === 6) return 'sabados';\r\n    return 'lunes_a_viernes';\r\n  };\r\n  \r\n  // Function to parse time string to minutes since midnight\r\n  const parseTimeToMinutes = (timeStr) => {\r\n    if (!timeStr) return null;\r\n    \r\n    // Clean up any invalid time strings (some entries in the JSON have errors)\r\n    if (timeStr.length !== 5 || timeStr.indexOf(':') !== 2) {\r\n      return null;\r\n    }\r\n    \r\n    try {\r\n      const [hours, minutes] = timeStr.split(':').map(num => parseInt(num, 10));\r\n      // Handle invalid time values\r\n      if (isNaN(hours) || isNaN(minutes) || hours >= 24 || minutes >= 60) {\r\n        return null;\r\n      }\r\n      return hours * 60 + minutes;\r\n    } catch (error) {\r\n      console.error(\"Error parsing time:\", timeStr, error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Function to convert minutes to formatted time string (HH:MM)\r\n  const minutesToTimeString = (minutes) => {\r\n    if (minutes === null || isNaN(minutes)) return '--:--';\r\n    \r\n    const hours = Math.floor(minutes / 60) % 24;\r\n    const mins = minutes % 60;\r\n    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\r\n  };\r\n  \r\n  // Function to calculate minutes until next train\r\n  const getMinutesUntil = (timeInMinutes) => {\r\n    if (timeInMinutes === null) return null;\r\n    \r\n    const now = new Date();\r\n    const currentMinutes = now.getHours() * 60 + now.getMinutes();\r\n    \r\n    // If the train time is earlier than current time, it's for tomorrow\r\n    if (timeInMinutes < currentMinutes) {\r\n      return (24 * 60 - currentMinutes) + timeInMinutes;\r\n    }\r\n    \r\n    return timeInMinutes - currentMinutes;\r\n  };\r\n  \r\n  // Function to find the next train times for a station\r\n  const findNextTrains = (stationName) => {\r\n    if (!stationName || !trainSchedules[stationName]) {\r\n      return { toLemos: null, toLacroze: null };\r\n    }\r\n    \r\n    const dayType = getDayType();\r\n    const stationSchedule = trainSchedules[stationName][dayType];\r\n    \r\n    if (!stationSchedule) {\r\n      return { toLemos: null, toLacroze: null };\r\n    }\r\n    \r\n    const now = new Date();\r\n    const currentMinutes = now.getHours() * 60 + now.getMinutes();\r\n    \r\n    // Find next train to Lemos\r\n    let nextToLemos = null;\r\n    if (stationSchedule.a_lemos && Array.isArray(stationSchedule.a_lemos)) {\r\n      const validTimes = stationSchedule.a_lemos\r\n        .map(time => parseTimeToMinutes(time))\r\n        .filter(minutes => minutes !== null);\r\n      \r\n      // Find the next departure time\r\n      nextToLemos = validTimes.find(minutes => minutes > currentMinutes);\r\n      \r\n      // If no train found today, get the first train of tomorrow\r\n      if (nextToLemos === undefined && validTimes.length > 0) {\r\n        nextToLemos = validTimes[0] + (24 * 60); // Add 24 hours\r\n      }\r\n    }\r\n    \r\n    // Find next train to Lacroze\r\n    let nextToLacroze = null;\r\n    if (stationSchedule.a_lacroze && Array.isArray(stationSchedule.a_lacroze)) {\r\n      const validTimes = stationSchedule.a_lacroze\r\n        .map(time => parseTimeToMinutes(time))\r\n        .filter(minutes => minutes !== null);\r\n      \r\n      // Find the next departure time\r\n      nextToLacroze = validTimes.find(minutes => minutes > currentMinutes);\r\n      \r\n      // If no train found today, get the first train of tomorrow\r\n      if (nextToLacroze === undefined && validTimes.length > 0) {\r\n        nextToLacroze = validTimes[0] + (24 * 60); // Add 24 hours\r\n      }\r\n    }\r\n    \r\n    return {\r\n      toLemos: nextToLemos,\r\n      toLacroze: nextToLacroze\r\n    };\r\n  };\r\n  \r\n  // Update next train times when nearest station changes or every minute\r\n  useEffect(() => {\r\n    if (nearestStation) {\r\n      const updateTrainTimes = () => {\r\n        const nextTrainTimes = findNextTrains(nearestStation.name);\r\n        setNextTrains(nextTrainTimes);\r\n        \r\n        // Also update the legacy nextTrainTime for compatibility\r\n        const nextInMinutes = Math.min(\r\n          nextTrainTimes.toLemos !== null ? getMinutesUntil(nextTrainTimes.toLemos) : Infinity,\r\n          nextTrainTimes.toLacroze !== null ? getMinutesUntil(nextTrainTimes.toLacroze) : Infinity\r\n        );\r\n        \r\n        setNextTrainTime(nextInMinutes !== Infinity ? nextInMinutes : null);\r\n      };\r\n      \r\n      // Update immediately\r\n      updateTrainTimes();\r\n      \r\n      // Then update every minute\r\n      const intervalId = setInterval(updateTrainTimes, 60000);\r\n      \r\n      return () => clearInterval(intervalId);\r\n    }\r\n  }, [nearestStation]);\r\n  \r\n  // Función para calcular la distancia entre dos puntos usando la fórmula de Haversine\r\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n    const toRad = (degrees) => degrees * Math.PI / 180;\r\n    const R = 6371; // Radio de la Tierra en km\r\n    const dLat = toRad(lat2 - lat1);\r\n    const dLon = toRad(lon2 - lon1);\r\n    const a = \r\n      Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * \r\n      Math.sin(dLon/2) * Math.sin(dLon/2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    const distance = R * c; // Distancia en km\r\n    return distance;\r\n  };\r\n  \r\n  // Función para calcular el tiempo estimado de llegada (ETA)\r\n  const calculateETA = (fromStation, toStation) => {\r\n    // Velocidad promedio del tren en km/h\r\n    const avgTrainSpeed = 30;\r\n    \r\n    // Encontrar las coordenadas de las estaciones\r\n    const fromCoords = stations.find(s => s[2] === fromStation.name);\r\n    const toCoords = stations.find(s => s[2] === toStation.name);\r\n    \r\n    if (!fromCoords || !toCoords) return null;\r\n    \r\n    const distance = calculateDistance(fromCoords[0], fromCoords[1], toCoords[0], toCoords[1]);\r\n    \r\n    // Calcular tiempo en minutos\r\n    const timeInMinutes = (distance / avgTrainSpeed) * 60;\r\n    \r\n    return Math.round(timeInMinutes);\r\n  };\r\n  \r\n  // Verificar si el usuario está cerca de una estación (menos de 30m) o en la ruta del tren\r\n  useEffect(() => {\r\n    if (currentLocation && nearestStation) {\r\n      // Convertir 30m a km\r\n      const thresholdDistance = 0.03; // 30 metros en kilómetros\r\n      \r\n      // Verificar si está cerca de una estación\r\n      setIsNearStation(nearestStation.distance <= thresholdDistance);\r\n      \r\n      // Verificar si está en la ruta del tren (dentro de un margen de 30m siguiendo la línea)\r\n      const isOnRoute = isUserOnTrainRoute(currentLocation.latitude, currentLocation.longitude);\r\n      setIsOnTrainRoute(isOnRoute);\r\n      \r\n      // Calcular tiempo para el próximo tren\r\n      calculateNextTrainTime();\r\n    } else {\r\n      setIsNearStation(false);\r\n      setIsOnTrainRoute(false);\r\n    }\r\n  }, [currentLocation, nearestStation]);\r\n  \r\n  // Función para verificar si el usuario está en la ruta del tren\r\n  const isUserOnTrainRoute = (userLat, userLon) => {\r\n    // Margen de 30m en kilómetros\r\n    const routeMargin = 0.03;\r\n    \r\n    // Verificar si el usuario está cerca de algún segmento de la ruta del tren\r\n    for (let i = 0; i < stations.length - 1; i++) {\r\n      const station1 = stations[i];\r\n      const station2 = stations[i + 1];\r\n      \r\n      // Calcular la distancia del usuario al segmento de línea entre dos estaciones\r\n      const distance = distanceToLineSegment(\r\n        userLat, userLon,\r\n        station1[0], station1[1],\r\n        station2[0], station2[1]\r\n      );\r\n      \r\n      if (distance <= routeMargin) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  };\r\n  \r\n  // Función para calcular la distancia de un punto a un segmento de línea\r\n  const distanceToLineSegment = (px, py, x1, y1, x2, y2) => {\r\n    const A = px - x1;\r\n    const B = py - y1;\r\n    const C = x2 - x1;\r\n    const D = y2 - y1;\r\n    \r\n    const dot = A * C + B * D;\r\n    const len_sq = C * C + D * D;\r\n    let param = -1;\r\n    \r\n    if (len_sq !== 0) {\r\n      param = dot / len_sq;\r\n    }\r\n    \r\n    let xx, yy;\r\n    \r\n    if (param < 0) {\r\n      xx = x1;\r\n      yy = y1;\r\n    } else if (param > 1) {\r\n      xx = x2;\r\n      yy = y2;\r\n    } else {\r\n      xx = x1 + param * C;\r\n      yy = y1 + param * D;\r\n    }\r\n    \r\n    const dx = px - xx;\r\n    const dy = py - yy;\r\n    \r\n    return calculateDistance(px, py, xx, yy);\r\n  };\r\n  \r\n  // Función para calcular el tiempo para el próximo tren\r\n  const calculateNextTrainTime = () => {\r\n    // Simulación de horarios de trenes (en la vida real, esto vendría de una API)\r\n    const now = new Date();\r\n    const hour = now.getHours();\r\n    const minute = now.getMinutes();\r\n    const currentTimeInMinutes = hour * 60 + minute;\r\n    \r\n    // Horarios de trenes simplificados (cada 20 minutos en horas pico, cada 30 en horas valle)\r\n    let nextTrainInMinutes = 0;\r\n    \r\n    if (hour >= 5 && hour < 9) {\r\n      // Hora pico mañana (cada 20 minutos)\r\n      nextTrainInMinutes = 20 - (currentTimeInMinutes % 20);\r\n    } else if (hour >= 16 && hour < 20) {\r\n      // Hora pico tarde (cada 20 minutos)\r\n      nextTrainInMinutes = 20 - (currentTimeInMinutes % 20);\r\n    } else if (hour >= 5 && hour < 23) {\r\n      // Hora valle (cada 30 minutos)\r\n      nextTrainInMinutes = 30 - (currentTimeInMinutes % 30);\r\n    } else {\r\n      // Fuera de servicio\r\n      nextTrainInMinutes = null;\r\n    }\r\n    \r\n    setNextTrainTime(nextTrainInMinutes);\r\n  };\r\n  \r\n  // Función para manejar el zoom\r\n  const handleZoom = (zoomIn) => {\r\n    setScale(prevScale => {\r\n      const newScale = zoomIn ? prevScale * 1.2 : prevScale / 1.2;\r\n      // Limitar el zoom entre 0.5 y 5\r\n      return Math.min(Math.max(newScale, 0.5), 5);\r\n    });\r\n  };\r\n  \r\n  // Función para centrar el mapa en la ubicación actual\r\n  const centerOnCurrentLocation = () => {\r\n    setOffset({ x: 0, y: 0 });\r\n    setScale(1);\r\n  };\r\n  \r\n  // Manejadores de eventos para arrastrar el mapa\r\n  const handleMouseDown = (e) => {\r\n    setIsDragging(true);\r\n    setDragStart({ x: e.clientX, y: e.clientY });\r\n  };\r\n  \r\n  const handleMouseMove = (e) => {\r\n    if (!isDragging) return;\r\n    \r\n    const dx = e.clientX - dragStart.x;\r\n    const dy = e.clientY - dragStart.y;\r\n    \r\n    setOffset(prev => ({\r\n      x: prev.x + dx,\r\n      y: prev.y + dy\r\n    }));\r\n    \r\n    setDragStart({ x: e.clientX, y: e.clientY });\r\n  };\r\n  \r\n  const handleMouseUp = () => {\r\n    setIsDragging(false);\r\n  };\r\n  \r\n  // Manejadores de eventos táctiles para dispositivos móviles\r\n  const handleTouchStart = (e) => {\r\n    if (e.touches.length === 1) {\r\n      setIsDragging(true);\r\n      setDragStart({ x: e.touches[0].clientX, y: e.touches[0].clientY });\r\n    }\r\n  };\r\n  \r\n  const handleTouchMove = (e) => {\r\n    if (!isDragging || e.touches.length !== 1) return;\r\n    \r\n    const dx = e.touches[0].clientX - dragStart.x;\r\n    const dy = e.touches[0].clientY - dragStart.y;\r\n    \r\n    setOffset(prev => ({\r\n      x: prev.x + dx,\r\n      y: prev.y + dy\r\n    }));\r\n    \r\n    setDragStart({ x: e.touches[0].clientX, y: e.touches[0].clientY });\r\n  };\r\n  \r\n  const handleTouchEnd = () => {\r\n    setIsDragging(false);\r\n  };\r\n  \r\n  // Función para manejar clics en el mapa\r\n  const handleCanvasClick = (e) => {\r\n    if (!canvasRef.current) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const rect = canvas.getBoundingClientRect();\r\n    const x = (e.clientX - rect.left) * (canvas.width / rect.width);\r\n    const y = (e.clientY - rect.top) * (canvas.height / rect.height);\r\n    \r\n    // Encontrar los límites del mapa\r\n    let minLat = Infinity, maxLat = -Infinity, minLon = Infinity, maxLon = -Infinity;\r\n    stations.forEach(station => {\r\n      minLat = Math.min(minLat, station[0]);\r\n      maxLat = Math.max(maxLat, station[0]);\r\n      minLon = Math.min(minLon, station[1]);\r\n      maxLon = Math.max(maxLon, station[1]);\r\n    });\r\n    \r\n    // Añadir padding\r\n    const padding = 0.01;\r\n    minLat -= padding;\r\n    maxLat += padding;\r\n    minLon -= padding;\r\n    maxLon += padding;\r\n    \r\n    // Función para convertir posición del canvas a coordenadas\r\n    const canvasToCoord = (x, y, width, height) => {\r\n      // Ajustar por zoom y desplazamiento\r\n      const adjustedX = (x - offset.x) / scale;\r\n      const adjustedY = (y - offset.y) / scale;\r\n      \r\n      const lon = minLon + (adjustedX / width) * (maxLon - minLon);\r\n      const lat = maxLat - (adjustedY / height) * (maxLat - minLat);\r\n      return { lat, lon };\r\n    };\r\n    \r\n    // Función para convertir coordenadas a posición del canvas\r\n    const coordToCanvas = (lat, lon, width, height) => {\r\n      const x = ((lon - minLon) / (maxLon - minLon)) * width;\r\n      const y = height - ((lat - minLat) / (maxLat - minLat)) * height;\r\n      \r\n      // Ajustar por zoom y desplazamiento\r\n      return { \r\n        x: x * scale + offset.x, \r\n        y: y * scale + offset.y \r\n      };\r\n    };\r\n    \r\n    // Verificar si se hizo clic en alguna estación\r\n    const stationRadius = 10; // Radio de detección de clic en píxeles\r\n    let clickedStation = null;\r\n    \r\n    stations.forEach(station => {\r\n      const pos = coordToCanvas(station[0], station[1], canvas.width, canvas.height);\r\n      const distance = Math.sqrt(Math.pow(x - pos.x, 2) + Math.pow(y - pos.y, 2));\r\n      \r\n      if (distance <= stationRadius) {\r\n        clickedStation = {\r\n          name: station[2],\r\n          coordinates: [station[0], station[1]]\r\n        };\r\n      }\r\n    });\r\n    \r\n    if (clickedStation) {\r\n      setSelectedStation(clickedStation);\r\n      setOpenDialog(true);\r\n    }\r\n  };\r\n  \r\n  // Función para cerrar el diálogo\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n  \r\n  // Función para establecer la estación seleccionada como destino\r\n  const handleSetAsDestination = () => {\r\n    setDestinationStation(selectedStation);\r\n    setOpenDialog(false);\r\n  };\r\n  \r\n  useEffect(() => {\r\n    if (!canvasRef.current || !currentLocation) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n    \r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, width, height);\r\n    \r\n    // Find map boundaries\r\n    let minLat = Infinity, maxLat = -Infinity, minLon = Infinity, maxLon = -Infinity;\r\n    stations.forEach(station => {\r\n      minLat = Math.min(minLat, station[0]);\r\n      maxLat = Math.max(maxLat, station[0]);\r\n      minLon = Math.min(minLon, station[1]);\r\n      maxLon = Math.max(maxLon, station[1]);\r\n    });\r\n    \r\n    // Add some padding\r\n    const padding = 0.01;\r\n    minLat -= padding;\r\n    maxLat += padding;\r\n    minLon -= padding;\r\n    maxLon += padding;\r\n    \r\n    // Function to convert coordinates to canvas position with zoom and offset\r\n    const coordToCanvas = (lat, lon) => {\r\n      const x = ((lon - minLon) / (maxLon - minLon)) * width;\r\n      const y = height - ((lat - minLat) / (maxLat - minLat)) * height;\r\n      \r\n      // Apply zoom and offset\r\n      return { \r\n        x: x * scale + offset.x, \r\n        y: y * scale + offset.y \r\n      };\r\n    };\r\n    \r\n    // Draw train line\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = '#3498db';\r\n    ctx.lineWidth = 4 * scale; // Adjust line width based on zoom\r\n    \r\n    const firstStation = coordToCanvas(stations[0][0], stations[0][1]);\r\n    ctx.moveTo(firstStation.x, firstStation.y);\r\n    \r\n    stations.forEach((station, index) => {\r\n      if (index === 0) return;\r\n      const pos = coordToCanvas(station[0], station[1]);\r\n      ctx.lineTo(pos.x, pos.y);\r\n    });\r\n    \r\n    ctx.stroke();\r\n    \r\n    // Draw stations\r\n    stations.forEach(station => {\r\n      const pos = coordToCanvas(station[0], station[1]);\r\n      \r\n      // Station circle\r\n      ctx.beginPath();\r\n      ctx.fillStyle = '#2c3e50';\r\n      ctx.arc(pos.x, pos.y, 5 * scale, 0, Math.PI * 2);\r\n      ctx.fill();\r\n      \r\n      // Highlight nearest station\r\n      if (nearestStation && station[2] === nearestStation.name) {\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = '#e74c3c';\r\n        ctx.lineWidth = 2 * scale;\r\n        ctx.arc(pos.x, pos.y, 8 * scale, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n      }\r\n      \r\n      // Highlight destination station if set\r\n      if (destinationStation && station[2] === destinationStation.name) {\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = '#27ae60'; // Green color for destination\r\n        ctx.lineWidth = 3 * scale;\r\n        ctx.arc(pos.x, pos.y, 10 * scale, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n        \r\n        // Add a destination flag or icon\r\n        ctx.beginPath();\r\n        ctx.fillStyle = '#27ae60';\r\n        ctx.moveTo(pos.x, pos.y - 15 * scale);\r\n        ctx.lineTo(pos.x + 10 * scale, pos.y - 5 * scale);\r\n        ctx.lineTo(pos.x, pos.y + 5 * scale);\r\n        ctx.lineTo(pos.x - 10 * scale, pos.y - 5 * scale);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n      }\r\n      \r\n      // Mejorar la visualización de los nombres de estaciones\r\n      if (scale > 1.5) {\r\n        // Aumentar el tamaño de la fuente y mejorar el espaciado\r\n        ctx.font = `bold ${14 * scale}px Arial`;\r\n        ctx.fillStyle = '#333';\r\n        ctx.textAlign = 'center';\r\n        \r\n        // Añadir un fondo blanco semi-transparente para mejorar la legibilidad\r\n        const textWidth = ctx.measureText(station[2]).width;\r\n        const textHeight = 14 * scale;\r\n        const padding = 4 * scale;\r\n        \r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\r\n        ctx.fillRect(\r\n          pos.x - textWidth/2 - padding, \r\n          pos.y - 20 * scale - textHeight, \r\n          textWidth + padding * 2, \r\n          textHeight + padding\r\n        );\r\n        \r\n        // Dibujar el texto con más espacio vertical\r\n        ctx.fillStyle = '#333';\r\n        ctx.fillText(station[2], pos.x, pos.y - 20 * scale);\r\n      }\r\n    });\r\n    \r\n    // Draw user location\r\n    if (currentLocation) {\r\n      const userPos = coordToCanvas(currentLocation.latitude, currentLocation.longitude);\r\n      ctx.beginPath();\r\n      ctx.fillStyle = '#e74c3c';\r\n      ctx.arc(userPos.x, userPos.y, 6 * scale, 0, Math.PI * 2);\r\n      ctx.fill();\r\n      \r\n      // Draw accuracy circle\r\n      if (currentLocation.accuracy) {\r\n        const accuracyInDegrees = currentLocation.accuracy / 111000; // Aproximadamente 111km por grado\r\n        const accuracyRadius = ((accuracyInDegrees / (maxLat - minLat)) * height) * scale;\r\n        \r\n        ctx.beginPath();\r\n        ctx.strokeStyle = 'rgba(231, 76, 60, 0.3)';\r\n        ctx.fillStyle = 'rgba(231, 76, 60, 0.1)';\r\n        ctx.lineWidth = 1 * scale;\r\n        ctx.arc(userPos.x, userPos.y, accuracyRadius, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n      }\r\n      \r\n      // Draw line between user and nearest station\r\n      if (nearestStation) {\r\n        const nearestStationData = stations.find(s => s[2] === nearestStation.name);\r\n        if (nearestStationData) {\r\n          const stationPos = coordToCanvas(nearestStationData[0], nearestStationData[1]);\r\n          \r\n          ctx.beginPath();\r\n          ctx.strokeStyle = '#e74c3c';\r\n          ctx.lineWidth = 2 * scale;\r\n          ctx.setLineDash([5 * scale, 3 * scale]);\r\n          ctx.moveTo(userPos.x, userPos.y);\r\n          ctx.lineTo(stationPos.x, stationPos.y);\r\n          ctx.stroke();\r\n          ctx.setLineDash([]);\r\n        }\r\n      }\r\n      \r\n      // Draw line between user and destination station if set\r\n      if (destinationStation) {\r\n        const destStationData = stations.find(s => s[2] === destinationStation.name);\r\n        if (destStationData) {\r\n          const stationPos = coordToCanvas(destStationData[0], destStationData[1]);\r\n          \r\n          ctx.beginPath();\r\n          ctx.strokeStyle = '#27ae60'; // Green color for destination\r\n          ctx.lineWidth = 2 * scale;\r\n          ctx.setLineDash([8 * scale, 4 * scale]);\r\n          ctx.moveTo(userPos.x, userPos.y);\r\n          ctx.lineTo(stationPos.x, stationPos.y);\r\n          ctx.stroke();\r\n          ctx.setLineDash([]);\r\n        }\r\n      }\r\n    }\r\n    \r\n  }, [currentLocation, nearestStation, scale, offset, destinationStation]);\r\n  \r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.5, delay: 0.2 }}\r\n    >\r\n      <Paper elevation={3} sx={{ p: 3, mb: 4, borderRadius: 2 }}>\r\n        <Typography variant=\"h5\" component=\"h3\" gutterBottom>\r\n          {isNearStation || isOnTrainRoute ? \"Mapa de Estaciones\" : \"Próximo Tren\"}\r\n        </Typography>\r\n        \r\n        {/* Mostrar información diferente según la ubicación del usuario */}\r\n        {!(isNearStation || isOnTrainRoute) ? (\r\n          // Si no está cerca de una estación ni en la ruta del tren, mostrar solo información del próximo tren\r\n          <Box sx={{ textAlign: 'center', py: 3 }}>\r\n            {nearestStation && (\r\n              <>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Estación más cercana: {nearestStation.name}\r\n                </Typography>\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                  Distancia: {nearestStation.distance < 1 \r\n                    ? `${(nearestStation.distance * 1000).toFixed(0)} metros` \r\n                    : `${nearestStation.distance.toFixed(2)} km`}\r\n                </Typography>\r\n                {nextTrainTime !== null ? (\r\n                  <Typography variant=\"h4\" color=\"primary\" sx={{ mt: 2 }}>\r\n                    Próximo tren en: {nextTrainTime} minutos\r\n                  </Typography>\r\n                ) : (\r\n                  <Typography variant=\"h6\" color=\"error\" sx={{ mt: 2 }}>\r\n                    No hay servicio de trenes en este momento\r\n                  </Typography>\r\n                )}\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\" \r\n                  startIcon={<DirectionsIcon />}\r\n                  sx={{ mt: 3 }}\r\n                  onClick={() => {\r\n                    // Establecer la estación más cercana como destino\r\n                    setDestinationStation({\r\n                      name: nearestStation.name,\r\n                      coordinates: stations.find(s => s[2] === nearestStation.name).slice(0, 2)\r\n                    });\r\n                  }}\r\n                >\r\n                  Ir a esta estación\r\n                </Button>\r\n              </>\r\n            )}\r\n          </Box>\r\n        ) : (\r\n          // Si está cerca de una estación o en la ruta del tren, mostrar el mapa completo\r\n          <>\r\n            {/* Mostrar información de destino solo cuando estamos cerca de una estación */}\r\n            {destinationStation && nearestStation && (isNearStation || destinationStation.name === nearestStation.name) && (\r\n              <Box sx={{ mb: 2, p: 2, bgcolor: 'rgba(39, 174, 96, 0.1)', borderRadius: 1 }}>\r\n                <Typography variant=\"body1\" fontWeight=\"bold\">\r\n                  Destino: {destinationStation.name}\r\n                </Typography>\r\n                {nearestStation && (\r\n                  <Typography variant=\"body2\">\r\n                    Tiempo estimado: {calculateETA(nearestStation, destinationStation) || '?'} minutos\r\n                  </Typography>\r\n                )}\r\n              </Box>\r\n            )}\r\n            \r\n            <Box sx={{ position: 'relative', width: '100%', height: 400, mb: 2 }}>\r\n              <canvas \r\n                ref={canvasRef} \r\n                width={800} \r\n                height={600}\r\n                style={{ \r\n                  width: '100%', \r\n                  height: '100%', \r\n                  cursor: isDragging ? 'grabbing' : 'grab',\r\n                  touchAction: 'none' // Prevent default touch actions\r\n                }}\r\n                onClick={handleCanvasClick}\r\n                onMouseDown={handleMouseDown}\r\n                onMouseMove={handleMouseMove}\r\n                onMouseUp={handleMouseUp}\r\n                onMouseLeave={handleMouseUp}\r\n                onTouchStart={handleTouchStart}\r\n                onTouchMove={handleTouchMove}\r\n                onTouchEnd={handleTouchEnd}\r\n              />\r\n              \r\n              {/* Zoom controls */}\r\n              <Box sx={{ \r\n                position: 'absolute', \r\n                bottom: 10, \r\n                right: 10, \r\n                display: 'flex', \r\n                flexDirection: 'column',\r\n                bgcolor: 'rgba(255, 255, 255, 0.8)',\r\n                borderRadius: 1,\r\n                boxShadow: 1\r\n              }}>\r\n                <IconButton onClick={() => handleZoom(true)} size=\"small\">\r\n                  <AddIcon />\r\n                </IconButton>\r\n                <IconButton onClick={() => handleZoom(false)} size=\"small\">\r\n                  <RemoveIcon />\r\n                </IconButton>\r\n                <IconButton onClick={centerOnCurrentLocation} size=\"small\">\r\n                  <MyLocationIcon />\r\n                </IconButton>\r\n              </Box>\r\n            </Box>\r\n            \r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n              Haz clic en cualquier estación para ver más información o establecerla como destino.\r\n            </Typography>\r\n          </>\r\n        )}\r\n      </Paper>\r\n      \r\n      {/* Dialog for station information */}\r\n      <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n        <DialogTitle>\r\n          Estación {selectedStation?.name}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body1\" paragraph>\r\n            Esta es la estación {selectedStation?.name} del Tren Urquiza.\r\n          </Typography>\r\n          \r\n          {nearestStation && selectedStation && (\r\n            <Typography variant=\"body2\" sx={{ mb: 2 }}>\r\n              Distancia desde tu ubicación: {\r\n                calculateDistance(\r\n                  currentLocation.latitude, \r\n                  currentLocation.longitude, \r\n                  selectedStation.coordinates[0], \r\n                  selectedStation.coordinates[1]\r\n                ).toFixed(2)\r\n              } km\r\n            </Typography>\r\n          )}\r\n          \r\n          {nearestStation && selectedStation && nearestStation.name !== selectedStation.name && (\r\n            <Typography variant=\"body2\">\r\n              Tiempo estimado desde tu estación actual: {\r\n                calculateETA(nearestStation, selectedStation) || '?'\r\n              } minutos\r\n            </Typography>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog}>Cerrar</Button>\r\n          <Button \r\n            onClick={handleSetAsDestination} \r\n            startIcon={<DirectionsIcon />}\r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n          >\r\n            Establecer como destino\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default StationMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}